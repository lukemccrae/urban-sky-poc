{
  "version": 3,
  "sources": ["../handler.ts", "../mockBalloons.ts", "../mockViewers.ts"],
  "sourcesContent": ["import { Viewer } from \"./types\";\n\nimport { mockBalloons } from \"./mockBalloons\";\nimport { mockViewers } from \"./mockViewers\";\nimport { Event } from \"./schema\";\n\ninterface Resolvers {\n  [key: string]: {\n    [key: string]: (...args: any[]) => any;\n  };\n}\n\nconst resolvers: Resolvers = {\n  Query: {\n    viewer: (viewerId: string) => {\n      const viewer = mockViewers.find((viewer) => {\n        return viewer.viewerId === viewerId;\n      });\n\n      if (!viewer) throw new Error(\"Viewer not found\");\n\n      return { ...viewer };\n    },\n  },\n  Viewer: {\n    balloons: (viewer: Viewer, ids: string[]) => {\n      console.log(viewer, \"<< resolver chain balloons\");\n      // Fetch balloons related to the fetched viewer\n\n      const matchedBalloons = mockBalloons.filter(\n        (obj) => obj.constructionLocation === viewer.id\n      );\n\n      console.log(matchedBalloons, \"<< matchedBalloons\");\n      return mockBalloons;\n    },\n  },\n};\n\nexport const handler = async (event: Event, context: any): Promise<any> => {\n  try {\n    const parentTypeName = event.info.parentTypeName;\n    const fieldName = event.info.fieldName;\n    console.log(parentTypeName, \"<< parentTypeName\");\n    console.log(fieldName, \"<< fieldName\");\n    // invoke the first link of the resolver chain with argument id\n    const viewer = resolvers[parentTypeName][fieldName](event.arguments.id);\n    return viewer;\n  } catch (e) {\n    console.log(e);\n  }\n};\n", "import {\n  BalloonModels,\n  ConstructionAreas,\n  ConstructionPhases,\n  EnvelopeTypes,\n  GasTypes,\n  RecoverySystems,\n} from \"./types\";\n\nexport const mockBalloons = [\n  {\n    id: \"111\",\n    model: BalloonModels.Microballoon,\n    constructionLocation: \"123\",\n    cameraPayload: 1,\n    trackingPayloadId: 2,\n    constructionArea: ConstructionAreas.Bay_1,\n    constructionPhase: ConstructionPhases.Packaging,\n    envelopeType: EnvelopeTypes.Chloroprene,\n    gasType: GasTypes.Helium,\n    recoverySystem: RecoverySystems.Parachute,\n  },\n  {\n    id: \"222\",\n    model: BalloonModels.Microballoon,\n    constructionLocation: \"123\",\n    cameraPayload: 1,\n    trackingPayloadId: 2,\n    constructionArea: ConstructionAreas.Bay_2,\n    constructionPhase: ConstructionPhases.PayloadIntegration,\n    envelopeType: EnvelopeTypes.Latex,\n    gasType: GasTypes.Hydrogen,\n    recoverySystem: RecoverySystems.Parachute,\n  },\n  {\n    id: \"333\",\n    model: BalloonModels.Microballoon,\n    constructionLocation: \"123\",\n    cameraPayload: 1,\n    trackingPayloadId: 2,\n    constructionArea: ConstructionAreas.Bay_3,\n    constructionPhase: ConstructionPhases.Packaging,\n    envelopeType: EnvelopeTypes.Chloroprene,\n    gasType: GasTypes.Helium,\n    recoverySystem: RecoverySystems.SoftLanding,\n  },\n  {\n    id: \"444\",\n    model: BalloonModels.Transosonde,\n    constructionLocation: \"456\",\n    cameraPayload: 1,\n    trackingPayloadId: 2,\n    constructionArea: ConstructionAreas.Bay_1,\n    constructionPhase: ConstructionPhases.EnvelopeMolding,\n    envelopeType: EnvelopeTypes.Chloroprene,\n    gasType: GasTypes.Hydrogen,\n    recoverySystem: RecoverySystems.SoftLanding,\n  },\n  {\n    id: \"555\",\n    model: BalloonModels.Transosonde,\n    constructionLocation: \"456\",\n    cameraPayload: 1,\n    trackingPayloadId: 2,\n    constructionArea: ConstructionAreas.Bay_1,\n    constructionPhase: ConstructionPhases.EnvelopeMolding,\n    envelopeType: EnvelopeTypes.Chloroprene,\n    gasType: GasTypes.Hydrogen,\n    recoverySystem: RecoverySystems.SoftLanding,\n  },\n];\n", "export const mockViewers = [\n  { viewerId: \"123\", username: \"viewer1\", email: \"dev1@urbansky.com\" },\n  { viewerId: \"456\", username: \"viewer2\", email: \"dev2@urbansky.com\" },\n];\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACSO,IAAM,eAAe;AAAA,EAC1B;AAAA,IACE,IAAI;AAAA,IACJ;AAAA,IACA,sBAAsB;AAAA,IACtB,eAAe;AAAA,IACf,mBAAmB;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ;AAAA,IACA,sBAAsB;AAAA,IACtB,eAAe;AAAA,IACf,mBAAmB;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ;AAAA,IACA,sBAAsB;AAAA,IACtB,eAAe;AAAA,IACf,mBAAmB;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ;AAAA,IACA,sBAAsB;AAAA,IACtB,eAAe;AAAA,IACf,mBAAmB;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ;AAAA,IACA,sBAAsB;AAAA,IACtB,eAAe;AAAA,IACf,mBAAmB;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;ACtEO,IAAM,cAAc;AAAA,EACzB,EAAE,UAAU,OAAO,UAAU,WAAW,OAAO,oBAAoB;AAAA,EACnE,EAAE,UAAU,OAAO,UAAU,WAAW,OAAO,oBAAoB;AACrE;;;AFSA,IAAM,YAAuB;AAAA,EAC3B,OAAO;AAAA,IACL,QAAQ,CAAC,aAAqB;AAC5B,YAAM,SAAS,YAAY,KAAK,CAACA,YAAW;AAC1C,eAAOA,QAAO,aAAa;AAAA,MAC7B,CAAC;AAED,UAAI,CAAC;AAAQ,cAAM,IAAI,MAAM,kBAAkB;AAE/C,aAAO,EAAE,GAAG,OAAO;AAAA,IACrB;AAAA,EACF;AAAA,EACA,QAAQ;AAAA,IACN,UAAU,CAAC,QAAgB,QAAkB;AAC3C,cAAQ,IAAI,QAAQ,4BAA4B;AAGhD,YAAM,kBAAkB,aAAa;AAAA,QACnC,CAAC,QAAQ,IAAI,yBAAyB,OAAO;AAAA,MAC/C;AAEA,cAAQ,IAAI,iBAAiB,oBAAoB;AACjD,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAEO,IAAM,UAAU,OAAO,OAAc,YAA+B;AACzE,MAAI;AACF,UAAM,iBAAiB,MAAM,KAAK;AAClC,UAAM,YAAY,MAAM,KAAK;AAC7B,YAAQ,IAAI,gBAAgB,mBAAmB;AAC/C,YAAQ,IAAI,WAAW,cAAc;AAErC,UAAM,SAAS,UAAU,cAAc,EAAE,SAAS,EAAE,MAAM,UAAU,EAAE;AACtE,WAAO;AAAA,EACT,SAAS,GAAG;AACV,YAAQ,IAAI,CAAC;AAAA,EACf;AACF;",
  "names": ["viewer"]
}
